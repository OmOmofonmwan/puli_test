name: Release Input Version

run-name: "Releasing ${{ github.event.repository.name }} #${{github.run_number}}"

# Trigger workflow manually
on:
  workflow_dispatch:
    inputs:
      snapshot_version:
        description: Enter Snapshot Version
        type: string
        required: true
      release_version:
        description: Enter Release Version
        type: string
        required: true
      release_message:
        description: Enter Release Version
        type: string

# Define environment parameters
env:
  BRANCH_NAME: ${{github.ref_name}}
  TRUNK_BRANCH_NAME: master
  RELEASE_MESSAGE: ${{github.event.inputs.release_message}}
  MAVEN_SETTING: '/home/ec2-user/maven/.m2/settings.xml'

# Define jobs within the workflow
jobs:
  #Setting versioning for build and tags
  set_build_and_tag_release_and_set_next_dev_version:
    name: Set, Build, Tag Release Version & Set Next Version
    runs-on: self-hosted
    permissions:
      contents: write

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4
        with:
          token: ${{secrets.IKMDEVOPS_PAT_TOKEN}}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Set Release Version
        run: |
          mvn -B versions:set \
          -s ${{env.MAVEN_SETTING}} \
          -DnewVersion=${{inputs.release_version}} \
          -DgenerateBackupPoms=false

      - name: Build Release Version
        run: |
           mvn -version
           mvn clean install \
                -s ${{env.MAVEN_SETTING}} \
                --batch-mode \
                -e \
                -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                -PcodeQuality,release-enforcement

      - name: Create tag
        run: |
              git remote set-url origin https://git:${{secrets.IKMDEVOPS_PAT_TOKEN}}@github.com/${{github.repository}}.git
              git pull -p
              git add .
              git config user.name "ikmdevops"
              git config user.email ${{vars.IKMDEVOPS_EMAIL}}
              git commit -m 'Release ${{inputs.release_version}}'
              git tag -a ${{inputs.release_version}} -m '${{inputs.release_version}}' --force


      - name: Set Dev Version
        run: |
          mvn -B versions:set \
          -DnewVersion=${{inputs.snapshot_version}} \
          -DgenerateBackupPoms=false


      - name: Commit & Push
        run: |
           git add .
           git commit -m 'Set next dev version to ${{inputs.snapshot_version}}'
           git push origin HEAD:${{env.TRUNK_BRANCH_NAME}}
           git push --tags origin

  # Creating a release
  create_release:
    name: Create Release
    permissions: write-all

    needs:
      - set_build_and_tag_release_and_set_next_dev_version

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Modify Release Message
        if: inputs.release_message == ''
        run: echo "RELEASE_MESSAGE=Release ${{inputs.release_version}}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        run: |
          curl -L \
           -X POST \
           -H "Accept: application/vnd.github+json" \
           -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
           -H "X-GitHub-Api-Version: 2022-11-28" \
           https://api.github.com/repos/${{github.repository}}/releases \
          -d '{"tag_name":"${{inputs.release_version}}","name":"${{inputs.release_version}}","body":"${{env.RELEASE_MESSAGE}}","draft":false,"prerelease":false,"generate_release_notes":false}'


  publish-artifacts:
    name: Publishing Artifacts to Nexus & OSSRH
    runs-on: self-hosted
    needs:
        - create_release
    steps:
          - name: Checkout Code Repository
            uses: actions/checkout@v4
            with:
                ref: ${{inputs.release_version}}

          - name: Maven Build
            run: |
              mvn clean install \
                -s ${{env.MAVEN_SETTING}} \
                --batch-mode \
                -e \
                -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                -PcodeQuality

          - name: Deploy To Nexus
            run: |
              mvn deploy \
                    --batch-mode \
                    -e \
                    -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                    -DskipTests \
                    -DskipITs \
                    -s ${{env.MAVEN_SETTING}} \
                    -DrepositoryId='maven-releases' \
                    -Dgpg.passphrase=${{secrets.SELF_HOSTED_GPG_PASSPHRASE}}
      
      
          - name: Publish To OSSRH (Maven Central Staging)
            run: |
                mvn deploy \
                    --batch-mode \
                    -e \
                    -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                    -DskipTests \
                    -DskipITs \
                    -s ${{env.MAVEN_SETTING}} \
                    -DrepositoryId='maven-releases' \
                    -DrepositoryIdOSSRH='true' \
                    -PstageOSSRH -Dgpg.passphrase=${{secrets.SELF_HOSTED_GPG_PASSPHRASE}}
