name: Release Workflow

run-name: "Releasing ${{ github.event.repository.name }} #${{github.run_number}}"

on:
  push:

# Define environment parameters
env:
  BRANCH_NAME: ${{github.ref_name}}
  TRUNK_BRANCH_NAME: master
  RELEASE_MESSAGE: ${{github.event.inputs.release_message}}
  MAVEN_SETTINGS: '/home/ec2-user/maven/.m2/settings.xml'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Verify Branch
        if: env.BRANCH_NAME != env.TRUNK_BRANCH_NAME
        run: |
          echo "ERROR: Attempting to release from branch ${{env.BRANCH_NAME}}. Release from ${{env.TRUNK_BRANCH_NAME}} branch only"
          exit 1

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Set up Node.js (for XML parsing)
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install XML2JS
        run: npm install xml2js

      - name: Extract and Increment Version
        id: increment_version
        run: |
          # Extract the current version from pom.xml
          CURRENT_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" pom.xml)
          
          # Split the version into parts
          VERSION_PREFIX=$(echo $CURRENT_VERSION | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+')
          VERSION_SUFFIX=$(echo $CURRENT_VERSION | grep -oE '[a-zA-Z0-9\-]+$')
          
          # Extract the current numeric suffix
          CURRENT_SUFFIX_NUMBER=$(echo $VERSION_SUFFIX | grep -oE '[0-9]+$')
          
          # Increment the suffix number for new development version
          NEW_SUFFIX_NUMBER=$((CURRENT_SUFFIX_NUMBER + 1))
          
          # Form the new versions
          RELEASE_VERSION="$VERSION_PREFIX"
          NEW_DEV_VERSION="$VERSION_PREFIX-ikm-r$NEW_SUFFIX_NUMBER"
          
          # Output the new versions
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "NEW_DEV_VERSION=$NEW_DEV_VERSION" >> $GITHUB_ENV

      - name: Set Release Version in pom.xml
        run: |
          RELEASE_VERSION=${{ env.RELEASE_VERSION }}
          
          # Update the version in pom.xml to release version
          node -e "
          const fs = require('fs');
          const xml2js = require('xml2js');
          const parser = new xml2js.Parser();
          const builder = new xml2js.Builder();
          
          fs.readFile('pom.xml', (err, data) => {
            if (err) throw err;
            parser.parseString(data, (err, result) => {
              if (err) throw err;
              result.project.version[0] = '$RELEASE_VERSION';
              const xml = builder.buildObject(result);
              fs.writeFile('pom.xml', xml, (err) => {
                if (err) throw err;
                console.log('Updated pom.xml with release version: $RELEASE_VERSION');
              });
            });
          });
          "

      - name: Commit Release Version
        run: |
          git add .
          git commit -am "Set release version to ${{ env.RELEASE_VERSION }}"
          git tag ${{ env.RELEASE_VERSION }}
          git push -f origin master --tags

      - name: Build Release Version
        run: |
          mvn clean package

      - name: Set New Development Version in pom.xml
        run: |
          NEW_DEV_VERSION=${{ env.NEW_DEV_VERSION }}
          
          # Update the version in pom.xml to new development version
          node -e "
          const fs = require('fs');
          const xml2js = require('xml2js');
          const parser = new xml2js.Parser();
          const builder = new xml2js.Builder();
          
          fs.readFile('pom.xml', (err, data) => {
            if (err) throw err;
            parser.parseString(data, (err, result) => {
              if (err) throw err;
              result.project.version[0] = '$NEW_DEV_VERSION';
              const xml = builder.buildObject(result);
              fs.writeFile('pom.xml', xml, (err) => {
                if (err) throw err;
                console.log('Updated pom.xml with new development version: $NEW_DEV_VERSION');
              });
            });
          });
          "

      - name: Commit New Development Version
        run: |
          git add .
          git commit -am "Set new development version to ${{ env.NEW_DEV_VERSION }}"
          git push origin master

  # Creating a release
  create_release:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Modify Release Message
        if: inputs.release_message == ''
        run: echo "RELEASE_MESSAGE=Release ${{env.new_dev_version}}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        run: |
          curl -L \
           -X POST \
           -H "Accept: application/vnd.github+json" \
           -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
           -H "X-GitHub-Api-Version: 2022-11-28" \
           https://api.github.com/repos/${{github.repository}}/releases \
          -d '{"tag_name":"${{env.new_dev_version}}","name":"${{env.new_dev_version}}","body":"${{env.RELEASE_MESSAGE}}","draft":false,"prerelease":false,"generate_release_notes":false}'


  publish-artifacts:
    name: Publishing Artifacts to Nexus & OSSRH
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.14.0
        with:
          checkout-fetch-depth: 0
          java-version: 21
          java-distribution: adopt
          maven-version: 3.9.0

      - name: Checkout Code Repository
        uses: actions/checkout@v4
        with:
          ref: ${{env.new_dev_version}}

      - name: Maven Build
        run: |
          mvn clean install \
            -s ${{env.MAVEN_SETTINGS}} \
            --batch-mode \
            -e \
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
            -PcodeQuality

      - name: Deploy To Nexus
        run: |
          mvn tidy:pom \
          mvn deploy \
                --batch-mode \
                -e \
                -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                -DskipTests \
                -DskipITs \
                -Dmaven.master.skip \
                -Dmaven.test.skip \
                -s ${{env.MAVEN_SETTINGS}} \
                -DrepositoryId='maven-releases' \
                -Dgpg.passphrase=${{secrets.SELF_HOSTED_GPG_PASSPHRASE}}


      - name: Publish To OSSRH (Maven Central Staging)
        run: |
          mvn tidy:pom \
          mvn deploy \
              --batch-mode \
              -e \
              -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
              -DskipTests \
              -DskipITs \
              -Dmaven.master.skip \
              -Dmaven.test.skip \
              -s ${{env.MAVEN_SETTINGS}} \
              -DrepositoryId='maven-releases' \
              -DrepositoryIdOSSRH='true' \
              -PstageOSSRH -Dgpg.passphrase=${{secrets.SELF_HOSTED_GPG_PASSPHRASE}}