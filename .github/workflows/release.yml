name: Release Workflow

on:
  push:

  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Set up Node.js (for XML parsing)
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install XML2JS
        run: npm install xml2js

      - name: Extract and Increment Version
        id: increment_version
        run: |
          # Extract the current version from pom.xml
          CURRENT_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" pom.xml)
          
          # Split the version into parts
          VERSION_PREFIX=$(echo $CURRENT_VERSION | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+')
          VERSION_SUFFIX=$(echo $CURRENT_VERSION | grep -oE '[a-zA-Z0-9\-]+$')
          
          # Extract the current numeric suffix
          CURRENT_SUFFIX_NUMBER=$(echo $VERSION_SUFFIX | grep -oE '[0-9]+$')
          
          # Increment the suffix number for new development version
          NEW_SUFFIX_NUMBER=$((CURRENT_SUFFIX_NUMBER + 1))
          
          # Form the new versions
          RELEASE_VERSION="$VERSION_PREFIX"
          NEW_DEV_VERSION="$VERSION_PREFIX-ikm-r$NEW_SUFFIX_NUMBER-SNAPSHOT"
          
          # Output the new versions
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "NEW_DEV_VERSION=$NEW_DEV_VERSION" >> $GITHUB_ENV

      - name: Set Release Version in pom.xml
        run: |
          RELEASE_VERSION=${{ env.RELEASE_VERSION }}
          
          # Update the version in pom.xml to release version
          node -e "
          const fs = require('fs');
          const xml2js = require('xml2js');
          const parser = new xml2js.Parser();
          const builder = new xml2js.Builder();
          
          fs.readFile('pom.xml', (err, data) => {
            if (err) throw err;
            parser.parseString(data, (err, result) => {
              if (err) throw err;
              result.project.version[0] = '$RELEASE_VERSION';
              const xml = builder.buildObject(result);
              fs.writeFile('pom.xml', xml, (err) => {
                if (err) throw err;
                console.log('Updated pom.xml with release version: $RELEASE_VERSION');
              });
            });
          });
          "

      - name: Commit Release Version
        run: |
          git commit -am "Set release version to ${{ env.RELEASE_VERSION }}"
          git tag ${{ env.RELEASE_VERSION }}
          git push origin master --tags

      - name: Build Release Version
        run: mvn clean package

      - name: Set New Development Version in pom.xml
        run: |
          NEW_DEV_VERSION=${{ env.NEW_DEV_VERSION }}
          
          # Update the version in pom.xml to new development version
          node -e "
          const fs = require('fs');
          const xml2js = require('xml2js');
          const parser = new xml2js.Parser();
          const builder = new xml2js.Builder();
          
          fs.readFile('pom.xml', (err, data) => {
            if (err) throw err;
            parser.parseString(data, (err, result) => {
              if (err) throw err;
              result.project.version[0] = '$NEW_DEV_VERSION';
              const xml = builder.buildObject(result);
              fs.writeFile('pom.xml', xml, (err) => {
                if (err) throw err;
                console.log('Updated pom.xml with new development version: $NEW_DEV_VERSION');
              });
            });
          });
          "

      - name: Commit New Development Version
        run: |
          git commit -am "Set new development version to ${{ env.NEW_DEV_VERSION }}"
          git push origin master